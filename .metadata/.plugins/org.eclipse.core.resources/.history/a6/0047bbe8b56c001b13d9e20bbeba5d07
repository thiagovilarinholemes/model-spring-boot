package com.api.resources;

import java.util.List;
import java.util.Optional;

import javax.persistence.EntityNotFoundException;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.dao.EmptyResultDataAccessException;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.api.dto.TutorialDTO;
import com.api.entities.Tutorial;
import com.api.repositories.TutorialRepository;
import com.api.services.TutorialService;

//@CrossOrigin(origins = "http://localhost:8081")
@RestController
@RequestMapping("/api")
public class TutorialControllers {
		
	@Autowired
	TutorialService service;

	@GetMapping("/tutorials/all")
	public ResponseEntity<List<Tutorial>> findAllByOrderByTitleAsc(){
		List<Tutorial> list = service.findAllByOrderByTitleAsc();
		return ResponseEntity.ok().body(list);
	}
	
	@GetMapping("/tutorials/{title}")
	public ResponseEntity<List<Tutorial>> getAllTutorials(@PathVariable("title") String title) {
		List<Tutorial> list = service.findByTitleContaining(title);
		return ResponseEntity.ok().body(list);
	}

//	@GetMapping("/tutorials/{id}")
//	public ResponseEntity<Tutorial> getTutorialById(@PathVariable("id") long id) {
//		Optional<Tutorial> obj = tutorialRepository.findById(id);
//		return obj.orElseThrow(()-> new ResourceNotFoundException(id));
//	}
//
//	@PostMapping("/tutorials")
//	public ResponseEntity<Tutorial> createTutorial(@RequestBody Tutorial tutorial) {
//		Tutorial obj = tutorialRepository.save(tutorial);
//		return ResponseEntity.ok().body(obj);
//	}
//
//	@PutMapping("/tutorials/{id}")
//	public ResponseEntity<Tutorial> updateTutorial(@PathVariable("id") long id, @RequestBody Tutorial tutorial) {
//		
//	}
//
//	@DeleteMapping("/tutorials/{id}")
//	public ResponseEntity<HttpStatus> deleteTutorial(@PathVariable("id") long id) {
//		
//	}
//
//	@DeleteMapping("/tutorials")
//	public ResponseEntity<HttpStatus> deleteAllTutorials() {
//		
//	}
//
//	@GetMapping("/tutorials/published")
//	public ResponseEntity<List<Tutorial>> findByPublished() {
//		
//	}
//}
}
